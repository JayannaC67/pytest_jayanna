{"name": "test_saucelabvalidation", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=131.0.6778.86)\nStacktrace:\n\tGetHandleVerifier [0x00007FF63E186CF5+28821]\n\t(No symbol) [0x00007FF63E0F3880]\n\t(No symbol) [0x00007FF63DF9578A]\n\t(No symbol) [0x00007FF63DF6F4F5]\n\t(No symbol) [0x00007FF63E016247]\n\t(No symbol) [0x00007FF63E02ECE2]\n\t(No symbol) [0x00007FF63E00F0A3]\n\t(No symbol) [0x00007FF63DFDA778]\n\t(No symbol) [0x00007FF63DFDB8E1]\n\tGetHandleVerifier [0x00007FF63E4BFCED+3408013]\n\tGetHandleVerifier [0x00007FF63E4D745F+3504127]\n\tGetHandleVerifier [0x00007FF63E4CB63D+3455453]\n\tGetHandleVerifier [0x00007FF63E24BDFB+835995]\n\t(No symbol) [0x00007FF63E0FEB9F]\n\t(No symbol) [0x00007FF63E0FA854]\n\t(No symbol) [0x00007FF63E0FA9ED]\n\t(No symbol) [0x00007FF63E0EA1D9]\n\tBaseThreadInitThunk [0x00007FFB5192259D+29]\n\tRtlUserThreadStart [0x00007FFB53C4AF38+40]", "trace": "self = <PT_scripts.Test_Qualitrix.Test_Qualitrix_e2e object at 0x000001F033AA7C50>\nreadJson = {'First_name': 'Jayanna', 'Item_1': 'Sauce Labs Backpack', 'Item_2': 'Sauce Labs Bike Light', 'Item_3': 'Sauce Labs Bolt T-Shirt', ...}\n\n    def test_saucelabvalidation(self, readJson):\n    \n        Login= Qualitrix_page_object(self.driver)\n        Login.launch_saucelab(readJson['url_saucelab'])\n>       Login.login_cred(self)\n\nPT_scripts\\Test_Qualitrix.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nPage_objects\\qualitrix_page_object.py:41: in login_cred\n    self.driver.find_element(By.XPATH, Qualitrix_home.sauce_homepage()).is_displayed()\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:770: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F033B85950>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF63E0EA1D9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB5192259D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFB53C4AF38+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=131.0.6778.86)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63E186CF5+28821]\nE       \t(No symbol) [0x00007FF63E0F3880]\nE       \t(No symbol) [0x00007FF63DF9578A]\nE       \t(No symbol) [0x00007FF63DF6F4F5]\nE       \t(No symbol) [0x00007FF63E016247]\nE       \t(No symbol) [0x00007FF63E02ECE2]\nE       \t(No symbol) [0x00007FF63E00F0A3]\nE       \t(No symbol) [0x00007FF63DFDA778]\nE       \t(No symbol) [0x00007FF63DFDB8E1]\nE       \tGetHandleVerifier [0x00007FF63E4BFCED+3408013]\nE       \tGetHandleVerifier [0x00007FF63E4D745F+3504127]\nE       \tGetHandleVerifier [0x00007FF63E4CB63D+3455453]\nE       \tGetHandleVerifier [0x00007FF63E24BDFB+835995]\nE       \t(No symbol) [0x00007FF63E0FEB9F]\nE       \t(No symbol) [0x00007FF63E0FA854]\nE       \t(No symbol) [0x00007FF63E0FA9ED]\nE       \t(No symbol) [0x00007FF63E0EA1D9]\nE       \tBaseThreadInitThunk [0x00007FFB5192259D+29]\nE       \tRtlUserThreadStart [0x00007FFB53C4AF38+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: NoSuchWindowException"}, "attachments": [{"name": "stdout", "source": "a5d492de-18ad-455b-b0b7-95a0e2ab684b-attachment.txt", "type": "text/plain"}], "start": 1733734505163, "stop": 1733734510838, "uuid": "cfb119d1-3aee-4e5b-99d4-896c2a38eaf1", "historyId": "8dad5704a62180c95fea92ae7b477cdd", "testCaseId": "8dad5704a62180c95fea92ae7b477cdd", "fullName": "PT_scripts.Test_Qualitrix.Test_Qualitrix_e2e#test_saucelabvalidation", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser_crbt')"}, {"name": "parentSuite", "value": "PT_scripts"}, {"name": "suite", "value": "Test_Qualitrix"}, {"name": "subSuite", "value": "Test_Qualitrix_e2e"}, {"name": "host", "value": "Jayanna"}, {"name": "thread", "value": "17268-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PT_scripts.Test_Qualitrix"}]}