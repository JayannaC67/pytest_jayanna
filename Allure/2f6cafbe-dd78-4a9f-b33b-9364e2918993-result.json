{"name": "test_homepage_validation", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <PT_scripts.Test_Qualitrix.Test_Qualitrix_e2e object at 0x0000026BD2747890>\nreadJson = {'First_name': 'Jayanna', 'Item_1': 'Sauce Labs Backpack', 'Item_2': 'Sauce Labs Bike Light', 'Item_3': 'Sauce Labs Bolt T-Shirt', ...}\n\n    def test_homepage_validation(self, readJson):\n        homepage = Qualitrix_page_object(self.driver)  # Activating the driver which we have created in supporting file (qualitrix_page_object.py).\n        homepage.launch_the_app(readJson['url_qualitrix'])\n        homepage.Validate_header_menu()\n        #homepage.closing_browser()\n>       homepage.validate_buttoncolor()\n\nPT_scripts\\Test_Qualitrix.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <Page_objects.qualitrix_page_object.Qualitrix_page_object object at 0x0000026BD27D4EC0>\n\n    def validate_buttoncolor(self):\n        #validate getaquote button text color and background color\n        Get_quote=self.driver.find_element(By.XPATH,Qualitrix_home.Get_a_quote())\n        Get_a_quote_color=Get_quote.value_of_css_property(\"color\")\n        Get_quote_bgcolor = Get_quote.value_of_css_property(\"background-color\")\n    \n       # print(\"Get a quote button text is\" + Get_a_quote_color)\n       # print(\"Getaquote buttonbgcolor is\" + Get_quote_bgcolor)\n    \n        #print(Color.from_string(Get_a_quote_color).hex)\n        #print(Color.from_string(Get_quote_bgcolor).hex)\n    \n        print(\"Get a quote button text is\" + common.color_picker(Color.from_string(Get_a_quote_color).hex))\n        print(\"Getaquote buttonbgcolor is\" + common.color_picker(Color.from_string(Get_quote_bgcolor).hex))\n    \n    \n    \n        padding=Get_quote.value_of_css_property(\"padding\")\n        print(padding)\n        text_align = Get_quote.value_of_css_property(\"text-align\")\n        print(text_align)\n    \n    \n        # company tab\n        company=self.driver.find_element(By.XPATH, Qualitrix_home.company_tab())\n        padding = company.value_of_css_property(\"padding\")\n        print(padding)\n        font_size = company.value_of_css_property(\"font-size\")\n        print(font_size)\n    \n        print(\"Company cladding detail is:\" + common.company(\"padding\"))\n        print(\"Company cladding detail is:\" + common.company(\"font-size\"))\n    \n>       assert font_size==common.company(\"font_size\")\nE       AssertionError\n\nPage_objects\\qualitrix_page_object.py:80: AssertionError"}, "attachments": [{"name": "stdout", "source": "21dc63e8-2cbb-4f99-a013-33570bce1764-attachment.txt", "type": "text/plain"}], "start": 1733742964079, "stop": 1733742968439, "uuid": "a2ee8746-cefb-409c-8da3-97b497a12b42", "historyId": "4b13762946d172932e6559c6efc048e2", "testCaseId": "4b13762946d172932e6559c6efc048e2", "fullName": "PT_scripts.Test_Qualitrix.Test_Qualitrix_e2e#test_homepage_validation", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('browser_crbt')"}, {"name": "parentSuite", "value": "PT_scripts"}, {"name": "suite", "value": "Test_Qualitrix"}, {"name": "subSuite", "value": "Test_Qualitrix_e2e"}, {"name": "host", "value": "Jayanna"}, {"name": "thread", "value": "8152-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "PT_scripts.Test_Qualitrix"}]}